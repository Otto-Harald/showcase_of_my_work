//var grid_coordinates = [];
var piece_movements = [1,4,3,1,2];
var socket = io.connect('http://127.0.0.1:5000/');
$(document).ready(function() {
    socket.on('connect', function(){
        socket.send('User has connected');
        });
    socket.on('message', function(msg){
        console.log("Received message: " + msg);
    });
})
document.getElementById("demo_button").onclick=function(){
console.log("ädoasrhfdoshf")
socket.on('connect', socket => {
  socket.join('room1');
    socket.on('join', function(msg){
        console.log("adsrfarasrrasrsars");
    });
});}


function create_a_grid(){
    // This function creates a hexagonal grid based on the given radius
    // it also assign coordinate values to each tile.
    // Tested on 21.12.2020, seems to work on all radii

    // This block of code creates three arrays that contain all the
    // coordinates of our hex grid in vectors.
    // eg. [[3,-3,0],[3,-2,-1],[3,-1,-2],[3,0,-3]....]
    /*var central_axis_coordinates = [[0,0,0]];
    var inverse_grid_coordinates = []
    for (var i = grid_radius; i > 0; i--){
        var central_vector = [0,(-1*i),i];
        var inverse_central_vector = [0,i,(-1*i)];
        central_axis_coordinates.push(central_vector,inverse_central_vector);
        var n = (grid_radius) - i;
        var k = n;
        for(var j = -1 * grid_radius; j <= n; j++){
        var vector = [i,j,k];
        grid_coordinates.push(vector);
        var inverse_i = -1*i;
        var inverse_j = -1*j;
        var inverse_k = -1*k;
        if(i == 0){inverse_i = i;}else if(j == 0){inverse_j = j;}else if(k == 0){inverse_k = k;}
        var inverse_vector = [];
        var inverse_vector = [inverse_i,inverse_j, inverse_k];
        k--;
        inverse_grid_coordinates.push(inverse_vector);}
        }
    // Coordinate block ends here. Tested 21.12.2020. Worked on 3 radius grid.
    console.log(central_axis_coordinates)
    console.log(grid_coordinates)
    console.log(inverse_grid_coordinates)
    // Next, central_axis_coordinates need to be sorted.
    var sorted_central_axis_coordinates = [];
    for (var i = 1; i < (central_axis_coordinates.length - 1); i++){if(i % 2 != 0){sorted_central_axis_coordinates.push(central_axis_coordinates[i]);}}
    sorted_central_axis_coordinates.push(central_axis_coordinates[0]);
    for (var j = (central_axis_coordinates.length -1); j > 0; j--){if(j % 2 == 0){sorted_central_axis_coordinates.push(central_axis_coordinates[j]);}}
    console.log("adihfghfåghf");
    console.log(grid_coordinates);
    // Sorting tested 21.12.2020. Worked on 3 and 5 radius. Central axis
    // coordinates are now in array called sorted_central_axis_coordinates.


    // All arrays are combined into one called grid_coordinates
    for (var i = 0; i < sorted_central_axis_coordinates.length; i++){grid_coordinates.push(sorted_central_axis_coordinates[i]);}
    for (var k = (inverse_grid_coordinates.length - 1); k >= 0; k--){grid_coordinates.push(inverse_grid_coordinates[k]);}


    // Here starts hexagon rendering. First block is central axis rendering.

    // List of variables that are out of for loop scope */
    // TODO: check if there are unnecessary variables
    var triangle_number = 0;
    for (var i = 1; i <= grid_radius; i++){
        triangle_number = triangle_number + i;
    }


    var page_center_left = 868;
    var page_center_top = 10*(grid_radius) + (10*grid_radius);
    var array_pos = 0;
    var y_offset = 638;
    var x_offset = -8;
    var natural_multiplier = 1;
    var wing_length = grid_radius +1;
    var denominator = wing_length;
    var number_of_layers = denominator - 1;
    var denominator_counter = 1;
    var y_denominator_offset = 730 + (75.5 * (number_of_layers + 1));
    var x_denominator_offset = 0;
    var negative = 1;
    var negative_multiplier = 0;

    // This for loop has two stages:
    // 1) ascending
    // 2) descending
    for (var j = 0; j < grid_coordinates.length; j++){
    var square_number = (wing_length * wing_length) + triangle_number;
    if(j == square_number){ // When descending phase stars
        negative = -1;
        negative_multiplier = 1;
        denominator_counter = denominator_counter-2;
    }else if (j < square_number){ // Else ascend
        negative = 1;
    }
        if(j == denominator){ // This starts a new row
            denominator = (j + (grid_radius + 1))+(denominator_counter);
            denominator_counter = denominator_counter + (negative);
            natural_multiplier = 1;
            y_denominator_offset = y_denominator_offset - (75.5);
            x_denominator_offset = (x_denominator_offset + (106.5));
            if(j > square_number && negative < 0){negative_multiplier++;}
        }

        // Calculating new coordinates
        var x_error_fix = 9*natural_multiplier;
        var hex_radius = 75 + (75 * natural_multiplier) + (75*negative_multiplier);
        var multiplier = 1.45;
        var angle = 0.1667;
        var offset = 0;

        var x_coordinate =-1*(hex_radius)*multiplier;
        var y_coordinate =-1*((Math.tan((angle + offset)*Math.PI) * (-1*x_coordinate)));
        var x_coordinate_in_px = x_coordinate + x_denominator_offset +page_center_left - x_error_fix + 297.75+ "px";
        var y_coordinate_in_px = y_coordinate +y_denominator_offset + page_center_top + 238+ "px";

        var hex_main_colour;
        var hex_left_colour;
        var hex_right_colour;
        var class_name_main = "hex_main";
        var class_name_left = "hex_left";
        var class_name_right = "hex_right";

        //creates the hexagon and assigns class name and id
            if(j % 7 == 0){hex_main_colour="#938562";hex_left_colour="#938562";hex_right_colour="#938562";}else if(j % 6 == 1){hex_main_colour="#B09E80";hex_left_colour="#B09E80";hex_right_colour="#B09E80";}else if(j % 6 == 2){hex_main_colour="#7D5B3F";hex_left_colour="#7D5B3F";hex_right_colour="#7D5B3F";}
            else if(j % 6 == 3){hex_main_colour="#644932";hex_left_colour="#644932";hex_right_colour="#644932";}else if(j % 6 == 4){hex_main_colour="#D0C5B3";hex_left_colour="#D0C5B3";hex_right_colour="#D0C5B3";}else if(j % 6 == 5){hex_main_colour="#75764e";hex_left_colour="#75764e";hex_right_colour="#75764e";}else{hex_main_colour="#766A4E";hex_left_colour="#766A4E";hex_right_colour="#766A4E";}
            var new_hexagon_main_div = document.createElement("div");
                new_hexagon_main_div.className = class_name_main;
                new_hexagon_main_div.style.left = x_coordinate_in_px;
                new_hexagon_main_div.style.top = y_coordinate_in_px;
                new_hexagon_main_div.style.backgroundColor = hex_main_colour;
                new_hexagon_main_div.id = grid_coordinates[j][0] + "/" + grid_coordinates[j][1] + "/" + grid_coordinates[j][2];
            var new_hexagon_left_div = document.createElement("div");
                new_hexagon_left_div.className = class_name_left;
                new_hexagon_left_div.style.borderRightColor = hex_left_colour;
            var new_hexagon_right_div = document.createElement("div");
                new_hexagon_right_div.className = class_name_right;
                new_hexagon_right_div.style.borderLeftColor = hex_right_colour;
            new_hexagon_main_div.appendChild(new_hexagon_left_div);
            new_hexagon_main_div.appendChild(new_hexagon_right_div);
            var body = document.getElementById("grid");
            body.appendChild(new_hexagon_main_div);
            natural_multiplier ++;
            var highlighted_hex = document.createElement("div");
            highlighted_hex.className = "hex_main_off";
            var highlighted_hex_left = document.createElement("div");
            highlighted_hex_left.className = "hex_left_off";
            var highlighted_hex_right = document.createElement("div");
            highlighted_hex_right.className = "hex_right_off";
            new_hexagon_main_div.appendChild(highlighted_hex);
            highlighted_hex.appendChild(highlighted_hex_left);
            highlighted_hex.appendChild(highlighted_hex_right);
        // end of hexagon render.
        new_hexagon_main_div.onclick = function(){make_a_move(false);};
}
}

create_a_grid();


// Dragging map effect:
    var dragItem;
    var container = document.getElementById("grid");

    var active = false;
    var currentX;
    var currentY;
    var initialX;
    var initialY;
    var xOffset = 0;
    var yOffset = 0;

    container.addEventListener("touchstart", dragStart, false);
    container.addEventListener("touchend", dragEnd, false);
    container.addEventListener("touchmove", drag, false);

    container.addEventListener("mousedown", dragStart, false);
    container.addEventListener("mouseup", dragEnd, false);
    container.addEventListener("mousemove", drag, false);

    function dragStart(e) {
        dragItem = e.target;
                                                        // Is this function called from touchstart or mousedown?
      if (e.type === "touchstart") {                    // touchstart
        initialX = e.touches[0].clientX - xOffset;      // set initial x coordinate
        initialY = e.touches[0].clientY - yOffset;
                                                        // set initial y coordinate
      } else {                                          // mousedown meaning we are currently dragging an element
        initialX = e.clientX - xOffset;                 // set initial x coordinate
        initialY = e.clientY - yOffset;                 // set initial y coordinate
      }
      if (dragItem.className === "hex_main") {                      // is the target that called this function our moveable object?
        active = true;
      }
    }

    function dragEnd(e) {
      initialX = currentX;
      initialY = currentY;

      active = false;
    }

    function drag(e) {
      if (active) {
        for (var i = 0; i < grid_coordinates.length; i++){
        var elementId = grid_coordinates[i][0] + "/" + grid_coordinates[i][1] + "/" + grid_coordinates[i][2];
        dragItem = document.getElementById(elementId);
        e.preventDefault();

        if (e.type === "touchmove") {
          currentX = e.touches[0].clientX - initialX;
          currentY = e.touches[0].clientY - initialY;
        } else {
          currentX = e.clientX - initialX;
          currentY = e.clientY - initialY;
        }

        xOffset = currentX;
        yOffset = currentY;

        setTranslate(currentX, currentY, dragItem);
      }}
    }

    function setTranslate(xPos, yPos, el) {
      el.style.transform = "translate3d(" + xPos + "px, " + yPos + "px, 0)";
    }

// Zoom scroll effect:
    // TODO: create feature that allows zooming in
    /*var root = document.documentElement;
    var lastScrollTop = 0;
    var tick = 0.1;
    var old_css_proportional = parseFloat(getComputedStyle(root).getPropertyValue('--proportional'));
    var st = window.pageYOffset || document.documentElement.scrollTop;  // Credits: "https://github.com/qeremy/so/blob/master/so.dom.js#L426"


    //container.addEventListener("scroll", function() {scroll_zoom();}, false);
     window.onscroll = scroll_zoom;
     function scroll_zoom(){
        console.log("FIRED!");
        /*if (st > lastScrollTop){                                        // downscroll code
          tick = -1*tick;
       }
       lastScrollTop = st <= 0 ? 0 : st;
       root.style.setProperty('--proportional', (old_css_proportional + tick));
        for (var i = 0; i < grid_coordinates.length; i++){

        }

    }*/

// START GAME:
// --> WAIT FOR OPPONENT TO JOIN
// --> GET STARTING LOCATIONS X
// --> START GAME PROGRAM (WHILE (GAME ONGOING) LOOP?)
function get_starting_locations(){
    for (var i = 0; i< location_vectors.length; i++){                   // i[j[0[x,y,z],1],j[0[x,y,z],1],j[0[x,y,z],1],j[0[x,y,z],1]]
        for (var j = 0; j < location_vectors[i].length; j++){
            var location_vector = location_vectors[i][j][0];
            var piece_type = location_vectors[i][j][1];
            var location_id = location_vector[0] + "/" + location_vector[1] + "/" + location_vector[2];
            var piece_colour;
            var piece_element = document.getElementById(location_id).childNodes[2];
            var piece_hex = document.getElementById(location_id);
            if(piece_type == all_piece_types[0]){piece_colour = "blue";}else if(piece_type == all_piece_types[1]){piece_colour = "purple";}else if(piece_type == all_piece_types[2]){piece_colour = "cyan";}else if(piece_type == all_piece_types[3]){piece_colour = "red";}if(piece_type == all_piece_types[4]){piece_colour = "green";}
                piece_element.id = location_id;
                piece_element.style.backgroundColor = piece_colour;
                piece_element.style.display = "inline-block";
                piece_element.childNodes[0].style.borderRightColor = piece_colour;
                piece_element.childNodes[0].style.display = "inline-block";
                piece_element.childNodes[1].style.borderLeftColor = piece_colour;
                piece_element.childNodes[1].style.display = "inline-block";
                piece_hex.onclick = function(){make_a_move(true);};
        }
    }
}
get_starting_locations();

function make_a_move(hex_has_a_piece){
    var target_hex = event.target;
    get_starting_locations();
    clear_all_hex();
    if(hex_has_a_piece){
        if(target_hex.id){
        var id_vector = id_to_vector(target_hex.id);
        var all_possible_moves = calculate_all_possible_moves(target_hex.id);
        for (var i = 0; i<all_possible_moves.length; i++){
            var hex_id = all_possible_moves[i][0] + "/" + all_possible_moves[i][1] + "/" + all_possible_moves[i][2];
            if(!check_for_position_or_if_friendly(id_vector,all_possible_moves[i], true, false)){
            var hex_id = all_possible_moves[i][0] + "/" + all_possible_moves[i][1] + "/" + all_possible_moves[i][2];
            var highlight_colour = getComputedStyle(document.documentElement).getPropertyValue('--pseudo_color_off');
            document.getElementById(hex_id).childNodes[2].style.display = "inline-block";
            document.getElementById(hex_id).childNodes[2].style.backgroundColor = highlight_colour;
            document.getElementById(hex_id).childNodes[2].childNodes[0].style.display = "inline-block";
            document.getElementById(hex_id).childNodes[2].childNodes[0].style.borderRightColor = highlight_colour;
            document.getElementById(hex_id).childNodes[2].childNodes[1].style.display = "inline-block";
            document.getElementById(hex_id).childNodes[2].childNodes[1].style.borderLeftColor = highlight_colour;}

            var click_hex = document.createElement("div");
            click_hex.className = "hex_main_invisible";
            document.getElementById(hex_id).appendChild(click_hex);
            click_hex.onclick = function(){
                    var ending_element = event.target.parentNode;
                    var starting_vector = id_to_vector(target_hex.id);
                    var ending_vector = id_to_vector(ending_element.id);
                    if(!check_for_position_or_if_friendly(starting_vector, ending_vector, true, false)){//MOVE CAN BE MADE
                        //TODO:make the actual move and send it to server.
                        var positions_of_starting_vector = check_for_position_or_if_friendly(starting_vector, [0,0,0], false, true);
                        var positions_of_ending_vector = check_for_position_or_if_friendly(ending_vector, [0,0,0], false, true);
                        $.ajax({
                            url: "/make_move",
                            type: "POST",
                            contentType: "application/json;charset=UTF-8",
                            dataType: "json",
                            data: JSON.stringify({html_data: [positions_of_starting_vector, positions_of_ending_vector, ending_vector]}),
                            success: function(response) {
                                    if(response["Success "]){console.log("SUCCESS!");
                                            // MAKE TARGET CHANGE COLOUR TO PIECE COLOUR
                                            ending_element.childNodes[2].style.display = "inline-block";
                                            ending_element.childNodes[2].style.backgroundColor = target_hex.style.backgroundColor;
                                            ending_element.childNodes[2].childNodes[0].style.display = "inline-block";
                                            ending_element.childNodes[2].childNodes[0].style.borderRightColor = target_hex.style.backgroundColor;
                                            ending_element.childNodes[2].childNodes[1].style.display = "inline-block";
                                            ending_element.childNodes[2].childNodes[1].style.borderLeftColor = target_hex.style.backgroundColor;
                                           // MAKE STARTING HEX COLOURLESS
                                           target_hex.id = '';
                                           target_hex.style.display = "none";
                                           target_hex.childNodes[0].display = "none";
                                           target_hex.childNodes[1].display = "none";


                                            if(check_for_position_or_if_friendly(ending_vector, starting_vector, false, true)){    // ENDING POSITION HAS AN ENEMY!
                                                location_vectors[positions_of_ending_vector[0]].splice(positions_of_ending_vector[1],1);
                                            }
                                            location_vectors[positions_of_starting_vector[0]][positions_of_starting_vector[1]].splice(0,1);
                                            location_vectors[positions_of_starting_vector[0]][positions_of_starting_vector[1]].unshift(ending_vector);
                                            get_starting_locations();


                                } else{
                                // TODO: make error contingency;
                                console.log("ERROR: SERVER GAVE NO RESPONSE!");
                                }
                        },
                    });

                    }
                }
            }
        }else{calculate_all_possible_moves(target_hex.id);}
    }else{return;}
}

function id_to_vector(id){
    var id_ints = id.split('/');
    var id_vector = [parseInt(id_ints[0]), parseInt(id_ints[1]), parseInt(id_ints[2])];
    return id_vector;
}

function calculate_all_possible_moves(id){
    var id_vector = id_to_vector(id);
    var all_possible_moves = [];
    var movement = calculate_movement(id_vector);
    for (var i = 0; i<grid_coordinates.length; i++){
        if ((Math.abs(grid_coordinates[i][0] - id_vector[0]) <= movement) && (Math.abs(grid_coordinates[i][1] - id_vector[1]) <= movement) && (Math.abs(grid_coordinates[i][2]- id_vector[2]) <= movement)){
        all_possible_moves.push(grid_coordinates[i]);
        }
    }
    return all_possible_moves;
}

function clear_all_hex(){
    for (var i = 0; i< grid_coordinates.length; i++){
        var hex_id = grid_coordinates[i][0] + "/" + grid_coordinates[i][1] + "/" + grid_coordinates[i][2];
        if(!document.getElementById(hex_id).childNodes[2].id){
            document.getElementById(hex_id).childNodes[2].style.display = "none";
        }
        if(document.getElementById(hex_id).childNodes[3]){document.getElementById(hex_id).childNodes[3].remove();}
    }
    return;
}

function check_for_position_or_if_friendly(starting_vector, target_vector, we_are_looking_for_friendlies, we_are_getting_vector_position){
    var team_number;
    var vector_place;
    for (var i = 0; i < location_vectors.length; i++){
        for (var j = 0; j < location_vectors[i].length; j++){
            if(location_vectors[i][j][0][0] == starting_vector[0] && location_vectors[i][j][0][1] == starting_vector[1] && location_vectors[i][j][0][2] == starting_vector[2]){
                team_number = i;
                vector_place = j;
                if(we_are_getting_vector_position && team_number >= 0 && vector_place >= 0){return [team_number, vector_place];}
                break;
            }
        }
    }
    if(we_are_getting_vector_position){return false;}
    for(var i = 0; i < location_vectors[team_number].length; i++){
        if(location_vectors[team_number][i][0][0] == target_vector[0] && location_vectors[team_number][i][0][1] == target_vector[1] && location_vectors[team_number][i][0][2] == target_vector[2]){if(we_are_looking_for_friendlies){return true;}}
    }
    if(we_are_looking_for_friendlies){return false;}
    return;
}

function calculate_movement(vector){
    var movement;
        for (var i = 0; i < location_vectors.length; i++){
        for (var j = 0; j < location_vectors[i].length; j++){
            if(location_vectors[i][j][0][0] == vector[0] && location_vectors[i][j][0][1] == vector[1] && location_vectors[i][j][0][2] == vector[2]){
            var piece_type = location_vectors[i][j][1];
                if(piece_type == all_piece_types[0]){movement = piece_movements[0];}else if(piece_type == all_piece_types[1]){movement = piece_movements[1];}else if(piece_type == all_piece_types[2]){movement = piece_movements[2];}else if(piece_type == all_piece_types[3]){movement = piece_movements[3];}if(piece_type == all_piece_types[4]){movement = piece_movements[4];}
                break;
            }
        }
    }
    return movement;
}

/*for (var i = 0; i < grid_coordinates.length; i++){
    var id = grid_coordinates[i][0] + "/" + grid_coordinates[i][1] + "/" + grid_coordinates[i][2];
    console.log(grid_coordinates[i]);
    if (document.getElementById(id)){console.log(document.getElementById(id).id)}else{console.log("EI LÖYDY");}
    console.log("----------------------------------------");

}*/
