# Title: Imdb review classification
# Author: Otto-Harald Hirvonen
# email: ottoharald.hirvonen@gmail.com
# phone number: 040 41 32 757
# description:
#               This is a neural network model that tries to classify imdb
#               reviews as either positive or negative based on the text
#               itself. I used keras built in dataset. I first modified the
#               data to replace unknown words and symbols to be easier read for
#               the model. I used a lot of functions of which I don't fully
#               understand but get the gist of. Some credit goes to an
#               youtube channel called tech with tim, who's recommendations
#               I used.


import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

data = keras.datasets.imdb

(train_data, train_labels), (test_data, test_labels) = data.load_data(num_words=10000)
# print(train_data[0])
word_index = data.get_word_index()
word_index = {k:(v+3) for k, v in word_index.items()}
word_index["<PAD>"] = 0
word_index["<START>"] = 1
word_index["<UNK>"] = 2
word_index["<UNUSED>"] = 3

reverse_word_index = dict([(value, key) for(key, value) in word_index.items()])

train_data = keras.preprocessing.sequence.pad_sequences(train_data, value=word_index["<PAD>"], padding="post", maxlen=250)
test_data = keras.preprocessing.sequence.pad_sequences(test_data, value=word_index["<PAD>"], padding="post", maxlen=250)

def decode_review(text):
    return " ".join([reverse_word_index.get(i, "?") for i in text])


# print(len(test_data[0]), len(test_data[1]))

# MODELING BELOW

model = keras.Sequential()
model.add(keras.layers.Embedding(1000, 16))
model.add(keras.layers.GlobalAveragePooling1D())
model.add(keras.layers.Dense(16, activation="relu"))
model.add(keras.layers.Dense(1, activation="sigmoid"))

model.summary()
